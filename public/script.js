let gridSize = 4;
let puzzleData = { numbers: [], solution: [] };
let startTime = null;
let timerInterval = null;
let finalTime = null;
let currentSeed = null;
let rowSums = [];
let colSums = [];
let history = [];

document.addEventListener("DOMContentLoaded", () => {
    fetch("/random_szam.txt")
        .then(response => response.text())
        .then(seed => {
            currentSeed = parseInt(seed.trim());
            console.log("Bet√∂lt√∂tt seed:", currentSeed);
            startGame(currentSeed); // üîÑ Csak a megl√©v≈ë seedet haszn√°ljuk!
        })
        .catch(error => console.error("Hiba a seed bet√∂lt√©sekor:", error));

    document.getElementById("sizeSelector").addEventListener("change", () => {
        gridSize = parseInt(document.getElementById("sizeSelector").value);
        startGame(currentSeed); // üîÑ M√©retv√°lt√°s ut√°n √∫jragener√°l√°s, de a megl√©v≈ë seed marad!
    });
});

function startGame(seed) {
    startTime = null;
    finalTime = null;
    clearInterval(timerInterval);
    document.getElementById("timer").textContent = "Id≈ë: 00:00";

    if (!seed) {
        console.error("Seed nem el√©rhet≈ë, √∫j gener√°l√°s sz√ºks√©ges!");
        return;
    }

    currentSeed = seed; // üîí Seed megtart√°sa
    generatePuzzle(currentSeed);
}

function pseudoRandom(seed) {
    seed = (seed * 1664525 + 1013904223) % 4294967296;
    return (seed >>> 16) / 65536; // 0 √©s 1 k√∂z√∂tti v√©letlen sz√°m
}

function generatePuzzle(seed) {
    const grid = document.getElementById("grid");
    grid.innerHTML = "";

    grid.style.display = "grid";
    grid.style.gridTemplateColumns = `repeat(${gridSize + 1}, 50px)`;
    grid.style.gridTemplateRows = `repeat(${gridSize + 1}, 50px)`;
    grid.style.gap = "5px";
    grid.style.margin = "20px auto";
    
    puzzleData.numbers = [];
    puzzleData.solution = [];
    rowSums = Array(gridSize).fill(0);
    colSums = Array(gridSize).fill(0);
    let rng = seed;

    for (let i = 0; i < gridSize; i++) {
        for (let j = 0; j < gridSize; j++) {
            rng = (rng * 1664525 + 1013904223) % 4294967296;
            let value = (rng % 9) + 1; // 1-9 k√∂z√∂tti √©rt√©kek
            puzzleData.numbers.push(value);

            let fixedIndex = (i * gridSize + j + seed) % (gridSize * gridSize);
            let isDeleted = pseudoRandom(rng) < 0.35; // üî• V√©letlenszer≈± t√∂rl√©s
            if (isDeleted) {
                puzzleData.solution.push(i * gridSize + j);
            } else {
                rowSums[i] += value;
                colSums[j] += value;
            }

            const cell = document.createElement("div");
            cell.classList.add("cell");
            cell.textContent = value;
            cell.dataset.index = i * gridSize + j;
            cell.id = `cell-${i}-${j}`; // üî• Egyedi azonos√≠t√≥ minden cell√°nak
            cell.addEventListener("click", () => toggleCellState(cell));
            grid.appendChild(cell);
        }

        const rowSumCell = document.createElement("div");
        rowSumCell.classList.add("cell", "sum-cell");
        rowSumCell.style.background = "#ddd";
        rowSumCell.style.fontWeight = "bold";
        rowSumCell.textContent = rowSums[i];
        rowSumCell.id = `sum-row-${i}`; // üî• Hozz√°adunk egy azonos√≠t√≥t a sor√∂sszeg mez≈ëkh√∂z!
        grid.appendChild(rowSumCell);
	rowSumCell.addEventListener("click", () => completeRow(i));
    }

    for (let j = 0; j < gridSize; j++) {
        const colSumCell = document.createElement("div");
        colSumCell.classList.add("cell", "sum-cell");
        colSumCell.style.background = "#ddd";
        colSumCell.style.fontWeight = "bold";
        colSumCell.textContent = colSums[j];
	colSumCell.id = `sum-col-${j}`; // üî• Hozz√°adunk egy azonos√≠t√≥t az oszlop√∂sszeg mez≈ëkh√∂z!
        grid.appendChild(colSumCell);
	colSumCell.addEventListener("click", () => completeColumn(j));
    }

    const emptyCorner = document.createElement("div");
    emptyCorner.classList.add("cell", "sum-cell");
    emptyCorner.style.background = "#ddd";
    emptyCorner.textContent = "";
    grid.appendChild(emptyCorner);
    updateSumHighlights(); // ‚úÖ P√°lya gener√°l√°s ut√°n azonnal lefuttatjuk az ellen≈ërz√©st
}

function saveHistory() {
    let currentState = Array.from(document.querySelectorAll(".cell"))
        .map(cell => ({
            index: cell.dataset.index,
            classList: Array.from(cell.classList) // üî• Cell√°k √°llapot√°nak ment√©se
        }));
    history.push(currentState);
}

function undoMove() {
    if (history.length === 0) return; // üìå Ha nincs mit visszavonni, kil√©p

    let lastState = history.pop(); // üîÑ Az utols√≥ l√©p√©s bet√∂lt√©se

    lastState.forEach(state => {
        let cell = document.querySelector(`[data-index='${state.index}']`);
        if (cell) {
            cell.className = "cell"; // üîÑ Alaphelyzetbe √°ll√≠tjuk
            state.classList.forEach(cls => cell.classList.add(cls)); // üî• Az el≈ëz≈ë oszt√°lyokat visszaadjuk
        }
    });

    updateSumHighlights(); // üîÑ Friss√≠tj√ºk a kiemel√©seket
}

function toggleCellState(cell) {
    if (!startTime) {
        startTime = Date.now();
        startTimer();
    }
    
    // üî• MENT√âS: L√©p√©s el≈ëtt t√°roljuk az √°llapotot
    saveHistory();

    if (cell.classList.contains("delete")) {
        cell.classList.remove("delete");
        cell.classList.add("keep");
    } else if (cell.classList.contains("keep")) {
        cell.classList.remove("keep");
    } else {
        cell.classList.add("delete");
    }
    updateSumHighlights();

    checkWinCondition();
}

function startTimer() {
    timerInterval = setInterval(() => {
        if (finalTime === null) {
            let elapsedTime = ((Date.now() - startTime) / 1000).toFixed(2);
            document.getElementById("timer").textContent = `Id≈ë: ${elapsedTime} m√°sodperc`;
        }
    }, 100);
}

function checkWinCondition() {
    let allCorrectDelete = true;
    let allCorrectKeep = true;

    document.querySelectorAll(".cell").forEach(cell => {
        let index = parseInt(cell.dataset.index);
        let isSolution = puzzleData.solution.includes(index);
        
        if (isSolution) {
            if (!cell.classList.contains("delete")) {
                allCorrectDelete = false; // Ha egy pirosra jel√∂lend≈ë nincs pirosan, akkor nem nyerhet√ºnk
            }
            if (cell.classList.contains("keep")) {
                allCorrectKeep = false; // Ha egy pirosra jel√∂lend≈ë z√∂ld, akkor nem nyerhet√ºnk
            }
        } else {
            if (!cell.classList.contains("keep")) {
                allCorrectKeep = false; // Ha egy z√∂ldre jel√∂lend≈ë nincs z√∂lden, akkor nem nyerhet√ºnk
            }
            if (cell.classList.contains("delete")) {
                allCorrectDelete = false; // Ha egy z√∂ldre jel√∂lend≈ë piros, akkor nem nyerhet√ºnk
            }
        }
    });

    if (allCorrectDelete || allCorrectKeep) {
        clearInterval(timerInterval);
        alert(`Gratul√°lok! Az id≈ëd: ${document.getElementById("timer").textContent}`);
        document.querySelectorAll(".cell").forEach(cell => {
            let index = parseInt(cell.dataset.index);
            if (puzzleData.solution.includes(index)) {
                cell.classList.add("delete");
            } else {
                cell.classList.add("keep");
            }
        });
    }
}

function generateNewSeed() {
    fetch("/random_szam.txt", { method: "PUT" })
        .then(() => {
            fetch("/random_szam.txt")
                .then(response => response.text())
                .then(seed => {
                    console.log("√öj seed gener√°lva:", seed.trim());
                    currentSeed = parseInt(seed.trim());
                    startGame(currentSeed); // üîÑ Csak most gener√°l √∫j sz√°mot
                });
        })
        .catch(error => console.error("Hiba a seed gener√°l√°sakor:", error));
}

function resetBoard() {
    document.querySelectorAll(".cell").forEach(cell => {
        cell.classList.remove("delete", "keep");
    });
}

function giveHint() {
    let unmarkedCells = Array.from(document.querySelectorAll(".cell"))
        .filter(cell => !cell.classList.contains("delete") && !cell.classList.contains("keep") && cell.dataset.index);

    if (unmarkedCells.length === 0) return; // Ha minden jel√∂lve van, ne adjon tippet

    let hintCell = unmarkedCells[Math.floor(Math.random() * unmarkedCells.length)];
    let index = parseInt(hintCell.dataset.index);
    let isSolution = puzzleData.solution.includes(index);

    if (isSolution) {
        hintCell.style.backgroundColor = "rgba(255, 0, 0, 0.3)"; // Halv√°ny piros, ha t√∂rlend≈ë
    } else {
        hintCell.style.backgroundColor = "rgba(0, 255, 0, 0.3)"; // Halv√°ny z√∂ld, ha megtartand√≥
    }

    // 3 m√°sodperc ut√°n vissza√°ll√≠tjuk az eredeti h√°tt√©rsz√≠nt
    setTimeout(() => {
        hintCell.style.backgroundColor = "";
    }, 3000);
}

function updateSumHighlights() {
    if (!rowSums || !colSums) return;

    // Sor√∂sszegek friss√≠t√©se √©s kiemel√©se
    for (let row = 0; row < gridSize; row++) {
        let currentRowSum = 0;
        for (let col = 0; col < gridSize; col++) {
            let cell = document.getElementById(`cell-${row}-${col}`);
            if (!cell) continue;
            let cellValue = parseInt(cell.innerText) || 0;
            if (!cell.classList.contains("delete")) {
                currentRowSum += cellValue;
            }
        }

        let rowSumElement = document.getElementById(`sum-row-${row}`);
        if (rowSumElement) {
            if (currentRowSum === rowSums[row]) {
                rowSumElement.classList.add("highlight");
            } else {
                rowSumElement.classList.remove("highlight");
            }
        }
    }

    // Oszlop√∂sszegek friss√≠t√©se √©s kiemel√©se
    for (let col = 0; col < gridSize; col++) {
        let currentColSum = 0;
        for (let row = 0; row < gridSize; row++) {
            let cell = document.getElementById(`cell-${row}-${col}`);
            if (!cell) continue;
            let cellValue = parseInt(cell.innerText) || 0;
            if (!cell.classList.contains("delete")) {
                currentColSum += cellValue;
            }
        }

        let colSumElement = document.getElementById(`sum-col-${col}`);
        if (colSumElement) {
            if (currentColSum === colSums[col]) {
                colSumElement.classList.add("highlight");
            } else {
                colSumElement.classList.remove("highlight");
            }
        }
    }
}

function completeRow(rowIndex) {
    let rowSumElement = document.getElementById(`sum-row-${rowIndex}`);
    if (!rowSumElement.classList.contains("highlight")) return; // Ha nem halv√°nyz√∂ld, ne csin√°ljunk semmit!

    for (let col = 0; col < gridSize; col++) {
        let cell = document.getElementById(`cell-${rowIndex}-${col}`);
        if (!cell) continue;
        if (!cell.classList.contains("delete") && !cell.classList.contains("keep")) {
            cell.classList.add("keep"); // Marad√©k feh√©r mez≈ëket z√∂ldre √°ll√≠tjuk
        }
    }
    updateSumHighlights(); // Friss√≠tj√ºk a jel√∂l√©seket
}

function completeColumn(colIndex) {
    let colSumElement = document.getElementById(`sum-col-${colIndex}`);
    if (!colSumElement.classList.contains("highlight")) return; // Ha nem halv√°nyz√∂ld, ne csin√°ljunk semmit!

    for (let row = 0; row < gridSize; row++) {
        let cell = document.getElementById(`cell-${row}-${colIndex}`);
        if (!cell) continue;
        if (!cell.classList.contains("delete") && !cell.classList.contains("keep")) {
            cell.classList.add("keep"); // Marad√©k feh√©r mez≈ëket z√∂ldre √°ll√≠tjuk
        }
    }
    updateSumHighlights(); // Friss√≠tj√ºk a jel√∂l√©seket
}
